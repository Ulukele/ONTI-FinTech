pragma solidity ^0.5.4;

contract Account_Numbers{

    event RegistrationRequest(address indexed sender);
    event UnregistrationRequest(address indexed sender);
    event RegistrationConfirmed(address indexed sender);

    //Approved
    mapping (string => address) person;
    mapping (address => bool) est;
    //Requested
    mapping (address => bool) RequestedA;
    mapping (address => bool) RequestedR;
    mapping (address => string) RequestedNum;

    //maxim's:
    mapping (address => string[]) TransactionsInfo;
    //maxim end

    address public owner;

    constructor () public {
        owner = msg.sender;
    }

    function GetOwner() public returns(address) {
        return owner;
    }

    function GetAddress(string memory _number) public returns(address){
        return person[_number];
    }

    function RedactOwner(address _person) public {
        require(msg.sender == owner);
        owner = _person;
    }

    //Get Info:
    function GetPersonInfoAR(address _person) public returns(bool){
        return RequestedA[_person];
    }

    function GetPersonInfoEST(address _person) public returns(bool){
        return est[_person];
    }

    function GetPersonInfoDR(address _person) public returns(bool){
        return RequestedR[_person];
    }

    //Requests:
    function RequestAddNumber(string memory _number) public {
        require(!RequestedA[msg.sender]);
        RequestedA[msg.sender] = true;
        RequestedNum[msg.sender] = _number;
        emit RegistrationRequest(msg.sender);
    }

    function RequestDelNumber() public {
        require(est[msg.sender]);
        require(!RequestedR[msg.sender]);
        RequestedA[msg.sender] = true;
        emit UnregistrationRequest(msg.sender);
    }


    //Confirm
    function Confirm(address _person) public {
        require(msg.sender == owner);
        if(RequestedA[_person]){
            est[_person] = true;
            person[RequestedNum[_person]] = _person;
            RequestedA[_person] = false;
        }
        if(RequestedR[_person]){
            est[_person] = false;
            person[RequestedNum[_person]] = 0x0000000000000000000000000000000000000000;
            RequestedR[_person] = false;
        }
        emit RegistrationConfirmed(msg.sender);
    }

    //maxim's:
    function SaveTransaction(address _from, address _to, string memory _TransactionInfoFrom, string memory _TransactionInfoTo) public {
        TransactionsInfo[_from].push(_TransactionInfoFrom);
        TransactionsInfo[_to].push(_TransactionInfoTo);
    }

    function GetTransactionsInfo(address _person) public returns(string[]){
        return TransactionsInfo[_person];
    }
    //maxim end





}
